name: "Request reviews"
on:
  pull_request_target:
    types: [labeled]
  workflow_run:
    workflows: [Pull Request Labeler]
    types: [completed]
jobs:
  request-reviewer:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/github-script@v5
        with:
          script: |
            const reviewers = []

            // The number of the pull request that triggered this run. If label
            // was added manually by a person the number will be stored in current
            // context, otherwise the number will be stored in the payload.
            const pr_number = context.issue.number || context.payload.workflow_run.pull_requests[0].number

            const return_data = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            })
            console.log(return_data.data.labels)

            //const { data: { labels } } = await github.rest.pulls.get({
            //  owner: context.repo.owner,
            //  repo: context.repo.repo,
            //  pull_number: pr_number
            //})
            //const label_names = labels.map(label => label.name)

            //if (label_names.includes('api')) {
            //  reviewers.push("bfredl")
            //  reviewers.push("gpanders")
            //  reviewers.push("muniter")
            //}

            //if (label_names.includes('ci')) {
            //  reviewers.push("jamessan")
            //}

            //if (label_names.includes('diagnostic')) {
            //  reviewers.push("gpanders")
            //}

            //if (label_names.includes('distribution')) {
            //  reviewers.push("jamessan")
            //}

            //if (label_names.includes('documentation')) {
            //  reviewers.push("clason")
            //}

            //if (label_names.includes('extmarks')) {
            //  reviewers.push("bfredl")
            //}

            //if (label_names.includes('filetype')) {
            //  reviewers.push("clason")
            //  reviewers.push("gpanders")
            //}

            //if (label_names.includes('gui')) {
            //  reviewers.push("glacambre")
            //  reviewers.push("smolck")
            //}

            //if (label_names.includes('lsp')) {
            //  reviewers.push("mfussenegger")
            //  reviewers.push("mjlbach")
            //}

            //if (label_names.includes('treesitter')) {
            //  reviewers.push("bfredl")
            //  reviewers.push("vigoux")
            //}

            //if (label_names.includes('typo')) {
            //  reviewers.push("dundargoc")
            //}

            //if (label_names.includes('ui')) {
            //  reviewers.push("bfredl")
            //}

            //if (label_names.includes('vim-patch')) {
            //  reviewers.push("janlazo")
            //  reviewers.push("seandewar")
            //  reviewers.push("zeertzjq")
            //}

            //// Remove actor, that is the person opening the pull request since
            //// they can't review themselves.
            //const index = reviewers.indexOf(context.actor);
            //if (index > -1) {
            //  reviewers.splice(index, 1);
            //}

            //github.rest.pulls.requestReviewers({
            //  owner: context.repo.owner,
            //  repo: context.repo.repo,
            //  pull_number: pr_number,
            //  reviewers: reviewers
            //});
